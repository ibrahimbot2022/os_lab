#include <stdio.h>

#define MAX_PROCESSES 10

struct Process {
    int id;
    int burstTime;
    int remainingTime;
    int arrivalTime;
    int turnaroundTime;
    int waitTime;
};

void roundRobinScheduling(struct Process processes[], int n, int timeQuantum) {
    int currentTime = 0;
    int completedProcesses = 0;

    while (completedProcesses < n) {
        for (int i = 0; i < n; i++) {
            if (processes[i].remainingTime > 0) {
                if (processes[i].remainingTime <= timeQuantum) {
                    currentTime += processes[i].remainingTime;
                    processes[i].remainingTime = 0;
                    processes[i].turnaroundTime = currentTime - processes[i].arrivalTime;
                    processes[i].waitTime = processes[i].turnaroundTime - processes[i].burstTime;
                    completedProcesses++;
                } else {
                    currentTime += timeQuantum;
                    processes[i].remainingTime -= timeQuantum;
                }
            }
        }
    }
}

int main() {
    int n;
    struct Process processes[MAX_PROCESSES];
    int timeQuantum;

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    printf("Enter the burst time and arrival time for each process:\n");
    for (int i = 0; i < n; i++) {
        processes[i].id = i + 1;
        printf("Process %d - Burst time: ", processes[i].id);
        scanf("%d", &processes[i].burstTime);
        printf("Process %d - Arrival time: ", processes[i].id);
        scanf("%d", &processes[i].arrivalTime);
        processes[i].remainingTime = processes[i].burstTime;
    }

    printf("Enter the time quantum: ");
    scanf("%d", &timeQuantum);

    roundRobinScheduling(processes, n, timeQuantum);

    printf("\nProcess\tBurst Time\tArrival Time\tTurnaround Time\tWaiting Time\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t\t%d\t\t%d\t\t%d\n", processes[i].id, processes[i].burstTime, processes[i].arrivalTime,
               processes[i].turnaroundTime, processes[i].waitTime);
    }

    // Calculate total turnaround time and wait time
    int totalTurnaroundTime = 0;
    int totalWaitTime = 0;
    for (int i = 0; i < n; i++) {
        totalTurnaroundTime += processes[i].turnaroundTime;
        totalWaitTime += processes[i].waitTime;
    }

    printf("\nTotal Turnaround Time: %d", totalTurnaroundTime);
    printf("\nAverage Turnaround Time: %.2f", (float) totalTurnaroundTime / n);
    printf("\nTotal Waiting Time: %d", totalWaitTime);
    printf("\nAverage Waiting Time: %.2f", (float) totalWaitTime / n);

    return 0;
}

